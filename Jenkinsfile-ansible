pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: terraform
                image: hashicorp/terraform:latest
                command: [ "sleep" ]
                args: [ "infinity" ]
              - name: azure-cli
                image: mcr.microsoft.com/azure-cli
                command: [ "sleep" ]
                args: [ "infinity" ]
              - name: ansible
                image: python:3.12-alpine  # Add Ansible container
                command: [ "sleep" ]
                args: [ "infinity" ]
            '''
        }
    }

    environment {
        ARM_SUBSCRIPTION_ID = credentials('AZURE_SUBSCRIPTION_ID')
        RESOURCE_GROUP = "nbaksclust-rg"
        AKS_CLUSTER = "prod-aks"
        BRANCH_NAME = "main"
        VIRTUAL_NETWORK_NAME: "nb-ansible-netw" 
        ROUTE_TABLE_NAME: "nb-ansible-rt"
        ANSIBLE_RESOURCE_GROUP: "nb-ansible-rg"
        SUBNET_NAME: "nb-ansible-subnet"
        LOCATION: "eastus"

    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Install Ansible') {
            steps {
                container('ansible') {
                sh '''
                echo "Checking and Installing system dependencies..."

                # Check and install each package if not present
                for pkg in git gcc python3-dev musl-dev sshpass build-base openssl-dev libffi-dev cmake make g++ linux-headers; do
                    if ! apk info -e "$pkg" > /dev/null 2>&1; then
                        apk add --no-cache "$pkg"
                    else
                        echo "$pkg is already installed."
                    fi
                done

                apk update

                # Install Python only if not installed
                if ! command -v python3 > /dev/null 2>&1; then
                    apk add python3 python3-dev
                else
                    echo "Python3 is already installed."
                fi

                # Setup virtual environment if not already created
                if [ ! -d "ansible-venv" ]; then
                    python3 -m venv ansible-venv
                    echo "Virtual environment created."
                else
                    echo "Virtual environment already exists."
                fi

                source ansible-venv/bin/activate

                # Install Cython if not installed
                if ! pip list | grep -q cython; then
                    pip install cython
                else
                    echo "Cython is already installed."
                fi

                echo "Upgrading pip and essential Python tools..."
                pip install --upgrade pip setuptools wheel || { echo "Failed to upgrade pip"; exit 1; }

                # Install Ansible if not installed
                if ! command -v ansible > /dev/null 2>&1; then
                    pip install ansible
                else
                    echo "Ansible is already installed."
                fi

                # Install Azure CLI if not installed
                if ! command -v az > /dev/null 2>&1; then
                    pip install azure-cli
                else
                    echo "Azure CLI is already installed."
                fi

                export PATH="$PATH:/home/jenkins/agent/workspace/ansible-multibranch_main/ansible-venv/bin"

                # Install Ansible collections if not installed
                if [ ! -d "/root/.ansible/collections/ansible_collections/azure/azcollection" ]; then
                    ansible-galaxy collection install azure.azcollection
                else
                    echo "Azure Ansible collection is already installed."
                fi

                # Install additional requirements if not already installed
                pip3 install -r ./07-ansiblerequirements/requirements.txt

                echo "Installing Ansible Azure dependencies..."
                pip install --no-cache-dir ansible[azure] || { echo "Failed to install Ansible Azure dependencies"; exit 1; }

                echo "Verifying installations..."
                ansible --version || { echo "Ansible installation verification failed"; exit 1; }
                ansible-playbook --version
                az version || { echo "Azure CLI installation verification failed"; exit 1; }

                echo "Virtual environment setup complete!"
                '''


                }
            }
        }

        stage('Azure Login & Test') {
            steps {
                container('azure-cli') {
                    script {
                        withCredentials([azureServicePrincipal('Terraform_Secret_ID')]) {
                            sh '''
                            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                            az account show
                            az group list --query "[?location=='eastus']"
                            '''
                        }
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                container('ansible') {
                    sh '''
                    if ! command -v az &> /dev/null; then
                        echo "Azure CLI not found. Installing..."
                        apk add --no-cache curl bash jq sudo py3-pip python3-dev gcc musl-dev libffi-dev
                        python3 -m pip install --upgrade pip setuptools wheel
                        pip install azure-cli
                    else
                        echo "Azure CLI is already installed."
                    fi
                    '''
                    script {
                        withCredentials([azureServicePrincipal('Terraform_Secret_ID')]) {
                            sh '''
                            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                            '''
                        }
                    }
                    sh '''
                        source ansible-venv/bin/activate
                        which ansible-playbook
                        ansible-playbook $WORKSPACE/06-ansiblefiles/01-create-rg.yml -e \
                        '{
                            "resource_group": "${RESOURCE_GROUP}",
                            "location": "${LOCATION}",
                            "virtual_network_name": "${VIRTUAL_NETWORK_NAME}", 
                            "subnet_name": "${SUBNET_NAME}", 
                            "route_table_name": "${ROUTE_TABLE_NAME}"
                        }'
                    '''
                }
            }
        }
    }

    post {
        always {
            container('azure-cli') {
                sh 'az logout'
            }
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
