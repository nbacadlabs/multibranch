pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: terraform
                image: hashicorp/terraform:latest
                command: [ "sleep" ]
                args: [ "infinity" ]
              - name: azure-cli
                image: mcr.microsoft.com/azure-cli
                command: [ "sleep" ]
                args: [ "infinity" ]
              - name: ansible
                image: python:3.12-alpine  # Add Ansible container
                command: [ "sleep" ]
                args: [ "infinity" ]
            '''
        }
    }

    environment {
        ARM_SUBSCRIPTION_ID = credentials('AZURE_SUBSCRIPTION_ID')
        RESOURCE_GROUP = "nbaksclust-rg"
        AKS_CLUSTER = "prod-aks"
        BRANCH_NAME = "main"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Install Ansible') {
            steps {
                container('ansible') {
                //     sh '''
                //     # Ensure system dependencies are installed first
                //     echo "Installing build tools..."
                //     apk add --no-cache gcc python3-dev build-base musl-dev linux-headers || { echo "Failed to install system dependencies"; exit 1; }

                //     # Check if the Azure SDK libraries are installed
                //     if ! python3 -c "import azure.mgmt.resource" >/dev/null 2>&1; then
                //         echo "azure-mgmt-resource not found. Installing..."
                //         pip install azure-mgmt-resource || { echo "Failed to install azure-mgmt-resource"; exit 1; }
                //     else
                //         echo "azure-mgmt-resource is already installed."
                //     fi

                //     if ! python3 -c "import azure.mgmt.compute" >/dev/null 2>&1; then
                //         echo "azure-mgmt-compute not found. Installing..."
                //         pip install azure-mgmt-compute || { echo "Failed to install azure-mgmt-compute"; exit 1; }
                //     else
                //         echo "azure-mgmt-compute is already installed."
                //     fi

                //     # Install psutil and other dependencies
                //     echo "Installing psutil..."
                //     pip install psutil || { echo "Failed to install psutil"; exit 1; }

                //     # Install Ansible and Azure CLI
                //     pip install --no-cache-dir ansible || { echo "Failed to install Ansible"; exit 1; }
                //     pip install azure-cli || { echo "Failed to install azure-cli"; exit 1; }
                //     pip install azure.mgmt.network
                //     pip install ansible[azure]
                //     pip install azure-storage-blob
                //     pip install azure.mgmt.automation
                //     pip install azure.mgmt.notificationhubs
                //     # Verify installations
                //     ansible --version
                //     pip install azure-ansible-base
                //     az version
                // '''
                sh '''
                    echo "Installing system dependencies..."
                    apk add --no-cache gcc python3-dev build-base musl-dev linux-headers || { echo "Failed to install system dependencies"; exit 1; }

                    echo "Upgrading pip..."
                    pip install --upgrade pip || { echo "Failed to upgrade pip"; exit 1; }

                    echo "Uninstalling any existing Azure CLI versions..."
                    pip uninstall -y azure-cli azure-cli-core azure-mgmt-compute azure-mgmt-resource azure-mgmt-storage || { echo "Failed to uninstall Azure CLI"; exit 1; }

                    echo "Installing Ansible and Azure Ansible Collection..."
                    pip install ansible[azure]
                    ansible-galaxy collection install azure.azcollection

                    echo "Verifying installations..."
                    ansible --version
                    az version
                '''

                }
            }
        }

        stage('Azure Login & Test') {
            steps {
                container('azure-cli') {
                    script {
                        withCredentials([azureServicePrincipal('Terraform_Secret_ID')]) {
                            sh '''
                            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                            az account show
                            az group list --query "[?location=='eastus']"
                            '''
                        }
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                container('ansible') {
                    sh '''
                    ansible-playbook ./06-ansiblefiles/01-create-rg.yaml --extra-vars "name=ansiblerg location=eastus"
                    '''
                }
            }
        }
    }

    post {
        always {
            container('azure-cli') {
                sh 'az logout'
            }
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
