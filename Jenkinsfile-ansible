pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: terraform
                image: hashicorp/terraform:latest
                command: [ "sleep" ]
                args: [ "infinity" ]
              - name: azure-cli
                image: mcr.microsoft.com/azure-cli
                command: [ "sleep" ]
                args: [ "infinity" ]
              - name: ansible
                image: python:3.12-alpine  # Add Ansible container
                command: [ "sleep" ]
                args: [ "infinity" ]
            '''
        }
    }

    environment {
        ARM_SUBSCRIPTION_ID = credentials('AZURE_SUBSCRIPTION_ID')
        RESOURCE_GROUP = "nbaksclust-rg"
        AKS_CLUSTER = "prod-aks"
        BRANCH_NAME = "main"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Install Ansible') {
            steps {
                container('ansible') {
                sh '''
                echo "Installing system dependencies..."
                apk add --no-cache gcc python3.10 python3.10-venv python3-dev build-base musl-dev openssl-dev cmake make g++ linux-headers || { echo "Failed to install system dependencies"; exit 1; }

                echo "Upgrading pip and essential Python tools..."
                pip install --upgrade pip setuptools wheel || { echo "Failed to upgrade pip"; exit 1; }

                echo "Creating and activating a virtual environment..."
                python3.10 -m venv ansible-venv || { echo "Failed to create virtual environment"; exit 1; }
                . ansible-venv/bin/activate || { echo "Failed to activate virtual environment"; exit 1; }

                echo "Installing required Python packages..."
                pip install --no-cache-dir ansible uamqp msgraph2 azure-cli || { echo "Failed to install core packages"; exit 1; }

                echo "Installing Ansible Azure dependencies..."
                pip install --no-cache-dir ansible[azure] || { echo "Failed to install Ansible Azure dependencies"; exit 1; }

                echo "Installing additional requirements from file..."
                pip install -r ./07-ansiblerequirements/requirements.txt || { echo "Failed to install requirements from file"; exit 1; }

                echo "Verifying installations..."
                ansible --version || { echo "Ansible installation verification failed"; exit 1; }
                az version || { echo "Azure CLI installation verification failed"; exit 1; }

                echo "Virtual environment setup complete!"
                '''

                }
            }
        }

        stage('Azure Login & Test') {
            steps {
                container('azure-cli') {
                    script {
                        withCredentials([azureServicePrincipal('Terraform_Secret_ID')]) {
                            sh '''
                            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                            az account show
                            az group list --query "[?location=='eastus']"
                            '''
                        }
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                container('ansible') {
                    sh '''
                    ansible-playbook ./06-ansiblefiles/01-create-rg.yaml
                    '''
                }
            }
        }
    }

    post {
        always {
            container('azure-cli') {
                sh 'az logout'
            }
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
