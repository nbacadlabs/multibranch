pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: terraform
                image: hashicorp/terraform:latest
                command: [ "sleep" ]
                args: [ "infinity" ]
              - name: azure-cli
                image: mcr.microsoft.com/azure-cli
                command: [ "sleep" ]
                args: [ "infinity" ]
            '''
        }
    }

    environment {
        ARM_SUBSCRIPTION_ID = credentials('ARM_SUBSCRIPTION_ID')
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Install Terraform & Azure CLI if not installed') {
            steps {
                container('terraform') {
                    sh '''
                    if ! command -v terraform &> /dev/null; then
                        echo "Terraform not found. Installing..."
                        apk add --no-cache terraform
                    else
                        echo "Terraform is already installed."
                    fi
                    '''
                }

                container('azure-cli') {
                   sh '''
                    # Update package lists
                    apk update
                    # Install required dependencies
                    apk add --no-cache curl bash jq sudo unzip py3-pip python3-dev gcc musl-dev libffi-dev openssl-dev cargo
                    # Install Rust and Cargo
                    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                    
                    # Ensure Cargo is in PATH
                    export PATH="$HOME/.cargo/bin:$PATH"

                    # Verify Rust and Cargo installation
                    rustc --version
                    cargo --version

                    # Upgrade pip and install Azure CLI
                    python3 -m pip install --upgrade pip setuptools wheel
                    pip install azure-cli
                    '''
                    // Verify Azure CLI installation new files
                    sh 'az version'
                }
            }
        }

        stage('Azure Login') {
            steps {
                container('azure-cli') {
                    sh '''
                    az --version
                    '''
                    script {
                        withCredentials([azureServicePrincipal('Azure_SP_ID')]) {
                            sh '''
                            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                            az account set --subscription $ARM_SUBSCRIPTION_ID
                            '''
                        }
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                container('terraform') {
                    sh '''
                    cd ./05-learning
                    terraform init
                    '''
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                container('terraform') {
                    script {
                        withCredentials([azureServicePrincipal('Azure_SP_ID')]) {
                            sh '''
                            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                            az account set --subscription $ARM_SUBSCRIPTION_ID
                            '''
                        }
                    }
                    sh '''
                    cd ./05-learning
                    terraform plan -out=tfplan
                    '''
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                container('terraform') {
                    sh '''
                    cd ./05-learning
                    terraform apply -auto-approve tfplan
                    '''
                }
            }
        }
    }

    post {
        always {
            container('azure-cli') {
                sh 'az logout'
            }
        }
        success {
            echo 'Terraform deployment completed successfully!'
        }
        failure {
            echo 'Terraform deployment failed!'
        }
    }
}
