pipeline {
    agent none  // No agent for the pipeline as we're using docker in each stage

    environment {
        // These variables are placeholders; they will be replaced with your Jenkins credentials
        ARM_SUBSCRIPTION_ID = credentials('AZURE_SUBSCRIPTION_ID') // Replace with your Subscription ID
    }

    stages {
        stage('Start Docker Container') {
            steps {
                script {
                    // Start the Docker container and give it a name
                    sh 'docker run --name my-custom-container -d vakem/kubepodtemplate:latest sleep infinity'
                }
            }
        }

        stage('Azure Login') {
            steps {
                script {
                    // Use Jenkins 'withCredentials' to inject Azure Service Principal credentials
                    withCredentials([usernamePassword(credentialsId: 'AZURE_SP_CREDENTIALS', usernameVariable: 'AZURE_CLIENT_ID', passwordVariable: 'AZURE_CLIENT_SECRET')]) {
                        // Execute the Azure login inside the container
                        sh '''
                        docker exec my-custom-container az login --service-principal \
                        -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                        docker exec my-custom-container az account set --subscription $ARM_SUBSCRIPTION_ID
                        '''
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    // Run terraform init inside the container
                    sh 'docker exec my-custom-container terraform init ./05-learning'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    // Run terraform plan inside the container
                    sh 'docker exec my-custom-container terraform plan ./05-learning'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    // Run terraform apply inside the container
                    sh 'docker exec my-custom-container terraform apply -auto-approve ./05-learning'
                }
            }
        }

        stage('Stop Docker Container') {
            steps {
                script {
                    // Stop and remove the Docker container after all stages are complete
                    sh 'docker stop my-custom-container'
                    sh 'docker rm my-custom-container'
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up and logout from Azure CLI inside the container
                sh 'docker exec my-custom-container az logout'
            }
        }
        success {
            echo 'Terraform deployment completed successfully!'
        }
        failure {
            echo 'Terraform deployment failed!'
        }
    }
}
