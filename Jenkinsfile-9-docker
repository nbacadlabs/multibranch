pipeline {
  agent any
  options {
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
  }

  environment {
    BRANCH = 'main'
    REPO = 'https://github.com/nbacadlabs/multibranch.git'

    // All data here
    // ARM_ACCESS_KEY = credentials('ARM_ACCESS_KEY')
    // ARM_CLIENT_ID = credentials('AZURE_CLIENT_ID')
    // ARM_CLIENT_SECRET = credentials('AZURE_CLIENT_SECRET')
    ARM_SUBSCRIPTION_ID = credentials('AZURE_SUBSCRIPTION_ID')
    // ARM_TENANT_ID = credentials('AZURE_TENANT_ID')
  }


  stages {


    stage('Checkout Source') {
      steps {
        git branch: "$BRANCH",
            url: "$REPO"
      }
    }


    stage('Terraform - init') {
      // when {
      //   branch "dev-*"
      // }
      steps {
         script {
            withCredentials([azureServicePrincipal('Azure_SP_ID')]) {
                sh '''
                az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                az account set --subscription $ARM_SUBSCRIPTION_ID
                '''
            }
        }
        sh '''
            cd ./04-infrastructure
            terraform init -reconfigure
        '''
      }
    }


    stage('Terraform - validate') {
        // when {
        //     branch "dev-*"
        // }
        steps {
           script {
            withCredentials([azureServicePrincipal('Azure_SP_ID')]) {
                sh '''
                az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                az account set --subscription $ARM_SUBSCRIPTION_ID
                '''
            }
        }
            sh '''
                cd ./04-infrastructure
                terraform validate
            '''
        }
    }


    stage('Terraform - plan') {
       
        //slake
    //  when {
    //         branch "dev-*"
    //   }
        steps {
           script {
            withCredentials([azureServicePrincipal('Azure_SP_ID')]) {
                sh '''
                az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                az account set --subscription $ARM_SUBSCRIPTION_ID
                '''
            }
        }
          sh '''
            cd ./04-infrastructure
            terraform plan
            '''
        }
    }


    stage('Terraform - apply') {
    // when {
    //     branch "PR-*"
    //   }
      steps {
        script {
            withCredentials([azureServicePrincipal('Azure_SP_ID')]) {
                sh '''
                az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                az account set --subscription $ARM_SUBSCRIPTION_ID
                '''
            }
        }
          sh '''
            cd ./04-infrastructure
            terraform apply -var-file=./04-infrastructure/terraform.tfvars -auto-approve
          '''
      }
    }

  //maximizing all test more
  }

  post {
    always {
      cleanWs()
    }
  }
} // pipeline another